// ===== SOLUCI√ìN COMPLETA CON SCROLL ULTRA OPTIMIZADO PARA M√ìVILES =====

console.log('üöÄ Iniciando soluci√≥n con scroll ultra optimizado...');

// ===== VARIABLES GLOBALES =====
let isMenuOpen = false;
let menuButton, mobileMenu;
let scrollTimeout;
let isMobile = false;

// ===== DETECCI√ìN DE DISPOSITIVO M√ìVIL =====
function detectMobile() {
    isMobile = window.innerWidth <= 768;
    return isMobile;
}

// ===== FUNCI√ìN: SCROLL SUAVE OPTIMIZADO PARA M√ìVILES =====
function smoothScrollTo(target) {
    const targetElement = document.querySelector(target);
    if (!targetElement) return;
    
    if (detectMobile()) {
        // ‚ú® SCROLL ULTRA OPTIMIZADO PARA M√ìVILES ‚ú®
        
        // M√©todo 1: Intersection Observer para scroll preciso
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    observer.disconnect();
                }
            });
        }, {
            threshold: 0.1,
            rootMargin: '-80px 0px 0px 0px' // Compensa altura del header
        });
        
        observer.observe(targetElement);
        
        // M√©todo 2: Scroll nativo optimizado con requestAnimationFrame
        requestAnimationFrame(() => {
            const headerHeight = 80;
            const targetPosition = targetElement.offsetTop - headerHeight;
            
            // Usar scrollTo nativo para m√°ximo rendimiento
            window.scrollTo({
                top: targetPosition,
                left: 0,
                behavior: 'smooth'
            });
        });
        
        // M√©todo 3: Fallback para navegadores antiguos
        setTimeout(() => {
            if (window.pageYOffset === window.scrollY) {
                targetElement.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start',
                    inline: 'nearest'
                });
            }
        }, 100);
        
    } else {
        // Desktop: scroll normal
        targetElement.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start' 
        });
    }
    
    console.log(`üéØ Scroll suave a: ${target}`);
}

// ===== FUNCI√ìN: CREAR MEN√ö HAMBURGUESA =====
function setupHamburgerMenu() {
    menuButton = document.getElementById('mobile-menu');
    mobileMenu = document.getElementById('nav-menu');
    
    if (!menuButton || !mobileMenu) {
        console.error('‚ùå Elementos del men√∫ no encontrados');
        return;
    }
    
    // Asegurar estructura del bot√≥n
    if (menuButton.children.length === 0) {
        menuButton.innerHTML = `
            <span class="bar"></span>
            <span class="bar"></span>
            <span class="bar"></span>
        `;
    }
    
    // Crear enlaces del men√∫ con scroll optimizado
    const menuItems = [
        { text: 'Inicio', target: '.hero' },
        { text: 'Servicios', target: '.iot-section' },
        { text: 'Misi√≥n', target: '.mission-vision' },
        { text: 'Suscripci√≥n', target: '.contact-section' }
    ];
    
    // Limpiar y crear men√∫
    mobileMenu.innerHTML = '';
    
    menuItems.forEach(item => {
        const li = document.createElement('li');
        li.className = 'nav-item';
        
        const a = document.createElement('a');
        a.href = '#';
        a.className = 'nav-link';
        a.textContent = item.text;
        
        // ‚ú® EVENT LISTENER CON SCROLL ULTRA OPTIMIZADO ‚ú®
        a.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            // Cerrar men√∫ inmediatamente para mejor UX
            closeMenu();
            
            // Scroll optimizado con delay m√≠nimo
            requestAnimationFrame(() => {
                setTimeout(() => {
                    smoothScrollTo(item.target);
                }, 200); // Reducido de 300 a 200ms
            });
        }, { passive: false });
        
        li.appendChild(a);
        mobileMenu.appendChild(li);
    });
    
    // Event listener del bot√≥n hamburguesa
    menuButton.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        toggleMenu();
    }, { passive: false });
    
    // Cerrar men√∫ al hacer click fuera con scroll optimizado
    document.addEventListener('click', function(e) {
        if (isMenuOpen && 
            !menuButton.contains(e.target) && 
            !mobileMenu.contains(e.target)) {
            closeMenu();
        }
    }, { passive: true });
    
    console.log('üçî Men√∫ hamburguesa con scroll optimizado configurado');
}

// ===== FUNCIONES DEL MEN√ö OPTIMIZADAS =====
function openMenu() {
    isMenuOpen = true;
    
    // ‚ú® ANIMACI√ìN OPTIMIZADA CON requestAnimationFrame ‚ú®
    requestAnimationFrame(() => {
        menuButton.classList.add('active');
        mobileMenu.classList.add('active');
        document.body.classList.add('menu-open');
        
        // Prevenir scroll del body en m√≥vil
        if (detectMobile()) {
            document.body.style.position = 'fixed';
            document.body.style.width = '100%';
            document.body.style.top = `-${window.scrollY}px`;
        }
    });
    
    console.log('üìÇ Men√∫ abierto con scroll optimizado');
}

function closeMenu() {
    isMenuOpen = false;
    
    // ‚ú® RESTAURAR SCROLL OPTIMIZADO ‚ú®
    requestAnimationFrame(() => {
        if (menuButton) menuButton.classList.remove('active');
        if (mobileMenu) mobileMenu.classList.remove('active');
        
        // Restaurar scroll del body
        if (detectMobile()) {
            const scrollY = document.body.style.top;
            document.body.style.position = '';
            document.body.style.width = '';
            document.body.style.top = '';
            document.body.classList.remove('menu-open');
            
            if (scrollY) {
                window.scrollTo(0, parseInt(scrollY || '0', 10) * -1);
            }
        } else {
            document.body.classList.remove('menu-open');
        }
    });
    
    console.log('üìÅ Men√∫ cerrado con scroll restaurado');
}

function toggleMenu() {
    if (isMenuOpen) {
        closeMenu();
    } else {
        openMenu();
    }
}

// ===== FUNCI√ìN: CREAR BOT√ìN FLOTANTE FORZADO =====
function createFloatingButton() {
    console.log('üîç Creando bot√≥n flotante...');
    
    // Remover botones existentes para evitar duplicados
    const existingButtons = document.querySelectorAll('#real-floating-back-btn');
    existingButtons.forEach(btn => {
        console.log('üóëÔ∏è Removiendo bot√≥n existente');
        btn.remove();
    });
    
    // ‚ú® FORZAR CREACI√ìN EN M√ìVILES ‚ú®
    if (window.innerWidth <= 768) {
        // Crear bot√≥n
        const button = document.createElement('button');
        button.id = 'real-floating-back-btn';
        button.setAttribute('aria-label', 'Ir al inicio');
        
        // ‚ú® ESTILOS FORZADOS INLINE PARA EVITAR BLOQUEOS CSS ‚ú®
        button.style.cssText = `
            display: flex !important;
            align-items: center;
            justify-content: center;
            position: fixed !important;
            bottom: 110px !important;
            right: 15px !important;
            background: rgba(224, 253, 44, 0.9) !important;
            border: 2px solid #E0FD2C !important;
            border-radius: 50% !important;
            width: 55px !important;
            height: 55px !important;
            z-index: 1550 !important;
            cursor: pointer !important;
            opacity: 0 !important;
            visibility: hidden !important;
            transform: translateY(20px) translateZ(0) !important;
            transition: all 0.4s ease !important;
            box-shadow: 0 4px 20px rgba(224, 253, 44, 0.4) !important;
            backdrop-filter: blur(10px) !important;
            -webkit-backdrop-filter: blur(10px) !important;
            -webkit-tap-highlight-color: transparent !important;
            font-family: inherit !important;
        `;
        
        // A√±adir icono de Font Awesome con estilos forzados
        button.innerHTML = '<i class="fas fa-chevron-up" style="font-size: 24px !important; color: #0f0f0f !important; font-weight: bold !important;"></i>';
        
        // ‚ú® EVENT LISTENERS CON SCROLL ULTRA OPTIMIZADO ‚ú®
        button.addEventListener('click', handleFloatingClick, { passive: false });
        button.addEventListener('touchstart', handleFloatingClick, { passive: true });
        
        document.body.appendChild(button);
        
        console.log('‚úÖ Bot√≥n flotante creado y forzado en m√≥vil');
        
        // Verificar que se cre√≥ correctamente
        setTimeout(() => {
            const createdButton = document.getElementById('real-floating-back-btn');
            if (createdButton) {
                console.log('‚úÖ Bot√≥n verificado en DOM');
                console.log('üìç Posici√≥n:', createdButton.style.position);
                console.log('üìç Bottom:', createdButton.style.bottom);
                console.log('üìç Right:', createdButton.style.right);
                console.log('üìç Display:', createdButton.style.display);
            } else {
                console.error('‚ùå Bot√≥n no encontrado despu√©s de creaci√≥n');
            }
        }, 100);
        
        return button;
    } else {
        console.log('üñ•Ô∏è Desktop detectado - bot√≥n no creado');
        return null;
    }
}

// ===== FUNCI√ìN: MANEJAR CLICK DEL BOT√ìN FLOTANTE OPTIMIZADO =====
function handleFloatingClick(e) {
    e.preventDefault();
    e.stopPropagation();
    
    console.log('üîº Scroll ultra suave al inicio');
    
    if (detectMobile()) {
        // ‚ú® SCROLL AL INICIO ULTRA OPTIMIZADO PARA M√ìVILES ‚ú®
        
        // M√©todo 1: requestAnimationFrame para m√°xima suavidad
        requestAnimationFrame(() => {
            // M√©todo 2: Smooth scroll nativo optimizado
            window.scrollTo({
                top: 0,
                left: 0,
                behavior: 'smooth'
            });
        });
        
        // M√©todo 3: Verificaci√≥n de scroll completado
        const checkScrollComplete = () => {
            if (window.pageYOffset > 10) {
                requestAnimationFrame(checkScrollComplete);
            } else {
                console.log('‚úÖ Scroll al inicio completado');
            }
        };
        
        setTimeout(checkScrollComplete, 100);
        
    } else {
        // Desktop: scroll normal
        window.scrollTo({
            top: 0,
            left: 0,
            behavior: 'smooth'
        });
    }
}

// ===== FUNCI√ìN: MANEJAR SCROLL ULTRA OPTIMIZADA CON DEBUG =====
function handleScroll() {
    const button = document.getElementById('real-floating-back-btn');
    
    if (!button) {
        console.log('‚ùå Bot√≥n no encontrado en handleScroll');
        return;
    }
    
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    const threshold = 200;
    
    console.log(`üìú Scroll: ${scrollTop}px, Threshold: ${threshold}px`);
    
    // ‚ú® OPTIMIZACI√ìN: Solo procesar cambios significativos ‚ú®
    if (Math.abs(scrollTop - (handleScroll.lastScrollY || 0)) < 5) return;
    handleScroll.lastScrollY = scrollTop;
    
    // Limpiar el timer anterior
    clearTimeout(scrollTimeout);
    
    if (scrollTop > threshold) {
        // Mostrar bot√≥n con estilos forzados
        if (!button.classList.contains('floating-visible')) {
            requestAnimationFrame(() => {
                button.classList.add('floating-visible');
                // ‚ú® FORZAR ESTILOS DE VISIBILIDAD ‚ú®
                button.style.opacity = '1';
                button.style.visibility = 'visible';
                button.style.transform = 'translateY(0) translateZ(0)';
                
                console.log('üëÅÔ∏è Bot√≥n flotante mostrado arriba del chatbot');
                console.log('üìç Estilos aplicados:', {
                    opacity: button.style.opacity,
                    visibility: button.style.visibility,
                    transform: button.style.transform
                });
            });
        }
        
        // Timer para auto-ocultar optimizado
        scrollTimeout = setTimeout(() => {
            requestAnimationFrame(() => {
                button.classList.remove('floating-visible');
                button.style.opacity = '0';
                button.style.visibility = 'hidden';
                button.style.transform = 'translateY(20px) translateZ(0)';
            });
            console.log('üôà Bot√≥n flotante ocultado por inactividad');
        }, 15000);
        
    } else {
        // Ocultar bot√≥n con estilos forzados
        if (button.classList.contains('floating-visible')) {
            requestAnimationFrame(() => {
                button.classList.remove('floating-visible');
                button.style.opacity = '0';
                button.style.visibility = 'hidden';
                button.style.transform = 'translateY(20px) translateZ(0)';
            });
            console.log('üôà Bot√≥n flotante ocultado (cerca del inicio)');
        }
    }
}

// ===== FUNCI√ìN: CONFIGURAR EVENTOS DE SCROLL ULTRA OPTIMIZADA =====
function setupScrollEvents() {
    // ‚ú® THROTTLE ULTRA OPTIMIZADO PARA SCROLL ‚ú®
    let ticking = false;
    
    function optimizedScrollHandler() {
        if (!ticking) {
            requestAnimationFrame(() => {
                handleScroll();
                ticking = false;
            });
            ticking = true;
        }
    }
    
    // ‚ú® EVENT LISTENER OPTIMIZADO CON OPCIONES PASSIVE ‚ú®
    if (detectMobile()) {
        // M√≥vil: throttle m√°s agresivo para mejor rendimiento
        let mobileScrollTimeout;
        const mobileScrollHandler = () => {
            clearTimeout(mobileScrollTimeout);
            mobileScrollTimeout = setTimeout(optimizedScrollHandler, 8); // ~120fps
        };
        
        window.addEventListener('scroll', mobileScrollHandler, { 
            passive: true,
            capture: false 
        });
        
        // Event listener adicional para touchend en m√≥viles
        window.addEventListener('touchend', () => {
            setTimeout(optimizedScrollHandler, 100);
        }, { passive: true });
        
    } else {
        // Desktop: throttle normal
        window.addEventListener('scroll', optimizedScrollHandler, { 
            passive: true,
            capture: false 
        });
    }
    
    // Llamada inicial optimizada
    requestAnimationFrame(() => {
        setTimeout(handleScroll, 100);
    });
    
    console.log('üìú Eventos de scroll ultra optimizados configurados');
}

// ===== FUNCI√ìN: OPTIMIZAR NAVEGACI√ìN DE ENLACES EXISTENTES =====
function optimizeExistingLinks() {
    // Optimizar enlaces de navegaci√≥n existentes
    const existingNavLinks = document.querySelectorAll('a[href^="#"]');
    
    existingNavLinks.forEach(link => {
        const href = link.getAttribute('href');
        if (href && href !== '#') {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                
                // Scroll optimizado para enlaces existentes
                const targetId = href.substring(1);
                const targetElement = document.getElementById(targetId) || 
                                   document.querySelector(`.${targetId}`);
                
                if (targetElement) {
                    if (detectMobile()) {
                        smoothScrollTo(`#${targetId}`);
                    } else {
                        targetElement.scrollIntoView({ 
                            behavior: 'smooth', 
                            block: 'start' 
                        });
                    }
                }
            }, { passive: false });
        }
    });
    
    console.log(`üîó ${existingNavLinks.length} enlaces optimizados para scroll suave`);
}

// ===== FUNCI√ìN: OPTIMIZACI√ìN DE SCROLL EN FORMULARIOS =====
function optimizeFormScrolling() {
    const form = document.getElementById('contact-form');
    const inputs = document.querySelectorAll('input, textarea');
    
    if (detectMobile()) {
        inputs.forEach(input => {
            // ‚ú® SCROLL SUAVE AL ENFOCAR CAMPOS EN M√ìVIL ‚ú®
            input.addEventListener('focus', function() {
                requestAnimationFrame(() => {
                    setTimeout(() => {
                        this.scrollIntoView({
                            behavior: 'smooth',
                            block: 'center'
                        });
                    }, 300); // Delay para permitir que se abra el teclado virtual
                });
            }, { passive: true });
        });
        
        // Optimizar scroll al enviar formulario
        if (form) {
            form.addEventListener('submit', function() {
                requestAnimationFrame(() => {
                    window.scrollTo({
                        top: 0,
                        behavior: 'smooth'
                    });
                });
            }, { passive: true });
        }
    }
    
    console.log('üìù Scroll de formularios optimizado para m√≥vil');
}

// ===== FUNCI√ìN: SCROLL INTELIGENTE ENTRE SECCIONES =====
function setupIntelligentSectionScrolling() {
    if (!detectMobile()) return;
    
    const sections = document.querySelectorAll('.hero, .main-services, .iot-section, .mission-vision, .contact-section');
    
    // ‚ú® INTERSECTION OBSERVER PARA NAVEGACI√ìN INTELIGENTE ‚ú®
    const sectionObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                // Scroll suave autom√°tico si la secci√≥n est√° parcialmente visible
                const rect = entry.boundingClientRect;
                const windowHeight = window.innerHeight;
                
                // Si menos del 70% de la secci√≥n es visible, hacer scroll suave
                if (rect.height > windowHeight * 0.7 && rect.top > windowHeight * 0.3) {
                    requestAnimationFrame(() => {
                        entry.target.scrollIntoView({
                            behavior: 'smooth',
                            block: 'start'
                        });
                    });
                }
            }
        });
    }, {
        threshold: [0.3, 0.7],
        rootMargin: '-80px 0px'
    });
    
    sections.forEach(section => {
        sectionObserver.observe(section);
    });
    
    console.log('üéØ Scroll inteligente entre secciones configurado');
}

// ===== FUNCI√ìN: INICIALIZACI√ìN PRINCIPAL OPTIMIZADA CON DEBUG =====
function initCompleteSolution() {
    console.log('üöÄ Iniciando soluci√≥n con scroll ultra optimizado...');
    console.log('üì± Ancho de pantalla:', window.innerWidth);
    console.log('üì± Es m√≥vil:', window.innerWidth <= 768);
    
    try {
        // Detectar dispositivo
        detectMobile();
        
        // 1. Configurar men√∫ hamburguesa
        setupHamburgerMenu();
        
        // 2. Crear bot√≥n flotante FORZADO
        const button = createFloatingButton();
        
        if (button) {
            console.log('‚úÖ Bot√≥n creado exitosamente');
            
            // 3. Verificar que el bot√≥n est√© en el DOM
            setTimeout(() => {
                const buttonCheck = document.getElementById('real-floating-back-btn');
                if (buttonCheck) {
                    console.log('‚úÖ Bot√≥n confirmado en DOM');
                    console.log('üìç Computed styles:', {
                        display: getComputedStyle(buttonCheck).display,
                        position: getComputedStyle(buttonCheck).position,
                        bottom: getComputedStyle(buttonCheck).bottom,
                        right: getComputedStyle(buttonCheck).right,
                        zIndex: getComputedStyle(buttonCheck).zIndex
                    });
                } else {
                    console.error('‚ùå Bot√≥n NO encontrado en verificaci√≥n');
                }
            }, 500);
        } else {
            console.log('‚ÑπÔ∏è Bot√≥n no creado (desktop o error)');
        }
        
        // 4. Configurar scroll optimizado
        setupScrollEvents();
        
        // 5. Optimizar enlaces existentes
        optimizeExistingLinks();
        
        // 6. Optimizar scroll en formularios
        optimizeFormScrolling();
        
        // 7. Configurar scroll inteligente entre secciones
        setupIntelligentSectionScrolling();
        
        console.log('‚úÖ Soluci√≥n con scroll ultra optimizado inicializada');
        
    } catch (error) {
        console.error('‚ùå Error en inicializaci√≥n:', error);
    }
}

// ===== FUNCI√ìN: REDETECCI√ìN EN RESIZE =====
function handleResize() {
    const wasMobile = isMobile;
    detectMobile();
    
    // Si cambi√≥ de m√≥vil a desktop o viceversa, reinicializar
    if (wasMobile !== isMobile) {
        console.log('üì±‚û°Ô∏èüñ•Ô∏è Cambio de dispositivo detectado, reoptimizando...');
        
        // Cerrar men√∫ si est√° abierto
        if (isMenuOpen) closeMenu();
        
        // Reconfigurar eventos de scroll
        setupScrollEvents();
        
        // Reoptimizar formularios
        optimizeFormScrolling();
    }
    
    // Mantener l√≥gica existente para pantallas grandes
    if (window.innerWidth > 768) {
        if (isMenuOpen) closeMenu();
    }
}

// ===== INICIALIZACI√ìN AUTOM√ÅTICA OPTIMIZADA =====
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initCompleteSolution, { once: true });
} else {
    initCompleteSolution();
}

// Backup para asegurar la creaci√≥n del bot√≥n si se carga tarde
window.addEventListener('load', () => {
    setTimeout(() => {
        if (!document.getElementById('real-floating-back-btn')) {
            createFloatingButton();
            handleScroll();
        }
    }, 500);
}, { once: true, passive: true });

// Resize handler optimizado
window.addEventListener('resize', handleResize, { passive: true });

// ===== OPTIMIZACIONES ADICIONALES PARA M√ìVILES =====

// Prevenir scroll bounce en iOS
if (detectMobile() && /iPad|iPhone|iPod/.test(navigator.userAgent)) {
    document.addEventListener('touchstart', function(e) {
        if (e.touches.length > 1) {
            e.preventDefault();
        }
    }, { passive: false });
    
    let lastTouchEnd = 0;
    document.addEventListener('touchend', function(e) {
        const now = (new Date()).getTime();
        if (now - lastTouchEnd <= 300) {
            e.preventDefault();
        }
        lastTouchEnd = now;
    }, { passive: false });
}

// ===== MONITOREO DE RENDIMIENTO DE SCROLL =====
function monitorScrollPerformance() {
    if ('performance' in window && detectMobile()) {
        let scrollStartTime;
        let scrollFrames = 0;
        
        window.addEventListener('scroll', () => {
            if (!scrollStartTime) {
                scrollStartTime = performance.now();
            }
            scrollFrames++;
        }, { passive: true });
        
        window.addEventListener('scrollend', () => {
            if (scrollStartTime) {
                const scrollDuration = performance.now() - scrollStartTime;
                const fps = (scrollFrames / scrollDuration) * 1000;
                
                console.log(`üìä Scroll performance: ${fps.toFixed(1)} FPS promedio`);
                
                scrollStartTime = null;
                scrollFrames = 0;
            }
        }, { passive: true });
    }
}

// Inicializar monitoreo de rendimiento
if (document.readyState === 'complete') {
    monitorScrollPerformance();
} else {
    window.addEventListener('load', monitorScrollPerformance, { once: true, passive: true });
}

// ===== API P√öBLICA OPTIMIZADA =====
window.completeSolution = {
    reinit: initCompleteSolution,
    toggleMenu: toggleMenu,
    button: () => document.getElementById('real-floating-back-btn'),
    smoothScrollTo: smoothScrollTo,
    isMobile: () => isMobile,
    optimizeScroll: () => {
        setupScrollEvents();
        optimizeFormScrolling();
        setupIntelligentSectionScrolling();
    }
};

console.log('‚úÖ Soluci√≥n completa con scroll ultra optimizado cargada');

// ===== FUNCI√ìN DE DEBUG PARA DIAGN√ìSTICO =====
window.debugFloatingButton = function() {
    console.log('üîç === DEBUG BOT√ìN FLOTANTE ===');
    console.log('üì± Ancho de pantalla:', window.innerWidth);
    console.log('üì± Es m√≥vil:', window.innerWidth <= 768);
    
    const button = document.getElementById('real-floating-back-btn');
    if (button) {
        console.log('‚úÖ Bot√≥n encontrado en DOM');
        console.log('üìç Estilos inline:', {
            display: button.style.display,
            position: button.style.position,
            bottom: button.style.bottom,
            right: button.style.right,
            opacity: button.style.opacity,
            visibility: button.style.visibility,
            zIndex: button.style.zIndex
        });
        console.log('üìç Computed styles:', {
            display: getComputedStyle(button).display,
            position: getComputedStyle(button).position,
            bottom: getComputedStyle(button).bottom,
            right: getComputedStyle(button).right,
            opacity: getComputedStyle(button).opacity,
            visibility: getComputedStyle(button).visibility,
            zIndex: getComputedStyle(button).zIndex
        });
        console.log('üìç Classes:', button.className);
        console.log('üìç Parent:', button.parentElement);
        
        // Forzar mostrar el bot√≥n para test
        button.style.opacity = '1';
        button.style.visibility = 'visible';
        button.style.transform = 'translateY(0) translateZ(0)';
        console.log('üîß Forzando visibilidad para test...');
        
    } else {
        console.error('‚ùå Bot√≥n NO encontrado en DOM');
        console.log('üîß Intentando crear bot√≥n...');
        if (window.innerWidth <= 768) {
            createFloatingButton();
        }
    }
    
    console.log('üîç === FIN DEBUG ===');
};
